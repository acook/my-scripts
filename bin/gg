#!/usr/bin/env bash

if [[ "$_" == "$0" ]]; then
  RUNNER=1
  THIS="$(basename "$0")"
else
  RUNNER=0
  THIS="gg"
fi

# only need to export GOPATH once
export GOPATH
GOPATH="$(command pwd -P 2>/dev/null)"
GO_CONFIG="${GO_CONFIG:-".golang"}"
GO_EXEC="${GO_EXEC:-"go"}"

# helper to print to stderr without eating things that look like opts
warn() { printf "%s\n" "$*" >&2; }

# iterate upwards over dirs until we find a config
while [[ ! -e "$GOPATH/$GO_CONFIG" ]]; do
  GOPATH="${GOPATH%/*}"
  if [[ "$GOPATH" = "" ]]; then
    warn "$THIS: no $GO_CONFIG config found using PWD instead"
    GOPATH="$(pwd)"
    break
  fi
done

warn "$THIS: using GOPATH=\"$GOPATH\""

# check for the presence of a config
if [[ -a "$GOPATH/$GO_CONFIG" ]]; then
  # just source it, no its not safe
  # shellcheck source=/dev/null
  source "$GOPATH/$GO_CONFIG"
fi

export GOBIN="$GOPATH/bin"

# if this script is being invoked directly
if [[ "$RUNNER" == 1 ]]; then
  if [[ "dir" == "$1" ]]; then
    if [[ -z "$3" ]]; then
      NAME="direct"
    else
      NAME="$3"
    fi

    DIR="$GOPATH/src/github.com/acook/$2"
    SYM="$GOPATH/$NAME"

    warn "$THIS: creating directory \"$DIR\""
    mkdir -p "$DIR"

    warn "$THIS: creating symlink \"$SYM\""
    ln -s "$DIR" "$SYM"
  else
    warn # newline

    # run go with all the arguments we were passed
    $GO_EXEC "$@"
    GO_EXIT=$?

    warn # newline

    GO_CMD="${1:-$GO_EXEC}"

    if [[ $GO_EXIT == 0 ]]; then
      warn "$THIS: $GO_CMD command completed successfully"
    else
      warn "$THIS: $GO_CMD command exited with an error code ($GO_EXIT)"
      exit $GO_EXIT
    fi
  fi
fi
