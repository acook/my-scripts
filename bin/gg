#!/usr/bin/env bash

if [[ "$_" == "$0" ]]; then
  RUNNER=1
  THIS="$(basename "$0")"
else
  RUNNER=0
  THIS="gg"
fi

# helper to print to stderr without eating things that look like opts
warn() { printf "%s\n" "$*" >&2; }
# pwd helper
getpwd() { command pwd -L 2> /dev/null; }
# if a directory goes missing, shellcheck asks we exit with an error
patherror() { warn "$THIS: unable to cd! (PWD=\"$(getpwd)\" THISPATH=\"$THISPATH\")"; exit 126; }

# store the current directory, so we can return to it later
THISPATH="$(getpwd)"

# only need to export GOPATH once
export GOPATH
GOPATH="$THISPATH"
GO_CONFIG="${GO_CONFIG:-".golang"}"
GO_EXEC="${GO_EXEC:-"go"}"

# iterate upwards over dirs until we find a config
until [[ -e "./$GO_CONFIG" ]]; do
  CURRPATH="$(getpwd)"
  if [[ "$CURRPATH" == "/" ]]; then
    warn "$THIS: no $GO_CONFIG config found using PWD instead"
    break
  fi
  cd .. || patherror
done

# capture the old value so we know if we can overwrite it later
OLD_GOBIN="$GOBIN"

# check for the presence of a config
if [[ -e "./$GO_CONFIG" ]]; then
  GOPATH="$(getpwd)"
  # just source it, no its not safe
  # this will let the GO_CONFIG set its own GOPATH
  # shellcheck source=/dev/null
  source "$GOPATH/$GO_CONFIG"
fi

# report what GOPATH we're using
warn "$THIS: using GOPATH=\"$GOPATH\""

# only overwrite GOBIN if it's unchanged by the GO_CONFIG
if [[ "$GOBIN" == "$OLD_GOBIN" ]]; then
  export GOBIN="$GOPATH/bin"
fi

# return back to the original path we started in
cd "$THISPATH" || patherror

# if this script is being invoked directly
if [[ "$RUNNER" == 1 ]]; then
  if [[ "dir" == "$1" ]]; then
    if [[ -z "$3" ]]; then
      NAME="direct"
    else
      NAME="$3"
    fi

    DIR="$GOPATH/src/github.com/acook/$2"
    SYM="$GOPATH/$NAME"

    warn "$THIS: creating directory \"$DIR\""
    mkdir -p "$DIR"

    warn "$THIS: creating symlink \"$SYM\""
    ln -s "$DIR" "$SYM"
  else
    warn # newline

    # run go with all the arguments we were passed
    $GO_EXEC "$@"
    # save the exit code returned
    GO_EXIT=$?

    GO_CMD="${1:-$GO_EXEC}"

    if [[ $GO_EXIT == 0 ]]; then
      warn "$THIS: $GO_CMD command completed successfully"
    else
      warn "$THIS: $GO_CMD command exited with an error code ($GO_EXIT)"
      [[ $GO_EXIT == 2 && -z $1 ]] && warn "$THIS: no commandline arguments supplied"
      [[ $GO_EXIT == 127 && ! $(command -v "$GO_EXEC" >/dev/null 2>&1) ]] && warn "$THIS: no go executable found? (GO_EXEC=\"$GO_EXEC\")"
      exit $GO_EXIT
    fi
  fi
fi
