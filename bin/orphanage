#!/usr/bin/env ruby

require "pathname"
require "set"
require "open3"

class Orphanage
  def initialize search_path, list_files_last: true, relative_paths: true, sep: ?\n
    @files           = Set.new
    @root            = search_path
    @list_files_last = list_files_last
    @relative_paths  = true
    @sep             = sep
  end
  attr_accessor :root, :files, :sep

  GIT_ROOT_COMMAND = "git rev-parse --show-toplevel"
  GIT_UNTRACKED    = "git status --untracked-files --porcelain | rg '^\\?\\? (.*)' -or '$1'"
  IGNORED_FILES    = %w(.git .hg)

  def list_files_last?
    @list_files_last
  end

  def relative_paths?
    @relative_paths
  end

  def git_root dir
    Open3.popen3(GIT_ROOT_COMMAND, {chdir: dir}) do |stdin, stdout, stderr, info|
      stdin.close
      stderr.close
      status = info.value
      if status == 0 then
        return Pathname.new stdout.read.chomp
      end
      return nil
    end
  end

  def in_git_repo? dir
    Open3.popen3(GIT_ROOT_COMMAND, {chdir: dir}) do |stdin, stdout, stderr, info|
      stdin.close
      stderr.close
      status = info.value
      if status == 0 then
        return true
      end
    end
    return false
  end

  def git_untracked_files dir
    Open3.popen3(GIT_UNTRACKED, {chdir: dir}) do |stdin, stdout, stderr, info|
      stdin.close
      stderr.close
      status = info.value
      if status == 0 then
        return stdout.read.split(?\n)
      end
      return nil
    end
  end

  def search
    handle_child Pathname.new root
    puts arrange
  end

  def arrange
    sort(display(@files)).join sep
  end

  def display list
    if relative_paths? then
      list.map do |f|
        f.relative_path_from(Dir.pwd).to_path
      end
    else
      list
    end
  end

  def sort list
    if list_files_last? then
      list.sort do |a,b|
        if (a.to_s.include?(?/) && b.to_s.include?(?/)) || (!a.to_s.include?(?/) && !b.to_s.include?(?/))
          a <=> b
        elsif a.to_s.include? ?/
          -1
        else
          1
        end
      end
    else
      list.sort
    end
  end

  def handle_child child
    return if !child.exist? || IGNORED_FILES.include?(child.basename)

    if child.directory? then
      if in_git_repo? child then
        (git_untracked_files(child) || []).each do |file|
          handle_file git_root(child).join file
        end
      else
        search_dir child
      end
    elsif child.file? then
      handle_file child.realpath
    end
  end

  def search_dir dir
    dir.each_child do |child|
      handle_child child
    end
  end

  def handle_file file
    @files << file
  end
end

Orphanage.new(ARGV.first || ".").search
