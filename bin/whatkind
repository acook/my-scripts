#!/usr/bin/env ruby

require 'pathname'

class WhatKind

  class Entry
    include Comparable
    def initialize path
      @path = Pathname.new path
    end
    attr :path

    def type
      if @type then
        @type
      elsif path.exist? then
        @type = %x[file '#{path}'].gsub(/^#{path}:\s+/, '').strip
      else
        @type = '(FILE NOT FOUND)'
      end
    end

    def children
      nil
    end

    def directory?
      self.class == Directory
    end

    def name
      @path.expand_path.basename.to_s
    end

    def <=> other
      self.name <=> other
    end
  end

  class Directory < Entry
    def children
      @children ||= get_children
    end

    def children_count
      @children_count ||= raw_children.length
    rescue Errno::EACCES => error
      -1
    end

    def get_children
      dirs  = Array.new
      files = Array.new
      raw_children.sort.each do |child|
        if child.directory? then
          dirs.push Directory.new child
        else
          files.push Entry.new child
        end
      end

      files + dirs
    end

    def raw_children
      @raw_children ||= path.children
    end

    def longest
      @longest ||= children.map{|c| c.name.length }.max
    end

    def type
      if children_count > 0 then
        super + " (#{children_count})"
      elsif children_count == 0 then
        super + " (empty)"
      elsif children_count < 0 then
        super + " (permission denied)"
      else
        super + " (unknown)"
      end
    end
  end

  class Theme
    module Color
      def reset_line
        "\033[0m\033[K"
      end

      def fg color_name
        esc style(:normal), "3#{color color_name}"
      end

      def fgb color_name
        esc style(:bright), "3#{color color_name}"
      end

      def bg color_name
        esc style(:normal), "4#{color color_name}"
      end

      def esc style, color_code
        "\033[#{style};#{color_code}m"
      end

      def color name
        COLORS.index name
      end

      def style name
        STYLES.index name
      end

      COLORS = %i[black red green yellow blue magenta cyan white]
      STYLES = %i[normal bright underlined]
    end

    extend Color

    COLOR_MAP = {
      /broken|NOT FOUND|cannot open/ => bg(:red),
      /bash|Bourne/      => fg(:green),
      /zsh/              => fg(:blue),
      /shell|SHELL/      => fg(:magenta),
      /perl/             => fg(:yellow),
      /ruby/             => fg(:red),
      /python/           => fg(:cyan),
      /x86|i386/         => fgb(:blue),
      /link|socket/      => fgb(:yellow),
      /directory/        => fgb(:black),
      /program/          => fgb(:yellow),
      /GIF/              => fgb(:magenta),
    }

    def initialize entry
      @entry = entry
    end

    def color
      COLOR_MAP.detect do |regex, ansi|
        break ansi if regex =~ @entry.type
      end || "\033[0m"
    end

  end

  class Formatter
    def initialize root
      @root = root
    end

    def render options, parent_longest = 0
      render_recurse @root, options.recurse, parent_longest
    end

    def render_recurse entry, recurse_depth, parent_longest, indent = 0
      if entry.directory? then
        unless entry.children_count > 0 then
          line entry, parent_longest, indent
        else
          line entry, parent_longest, indent
          entry.children.each do |child|
            render_recurse child, (recurse_depth - 1), entry.longest, (indent + 1)
          end unless recurse_depth < 1
        end
      else
        line entry, parent_longest, indent
      end
    end

    def line entry, longest, indent
      text = [indentation(indent), entry.name.ljust(longest), div, entry.type].join
      if text.length > console_width then
        text = text[0,(console_width-1)] + "â€¦"
      end
      print Theme.new(entry).color, text, Theme.reset_line, ?\n
    end

    def indentation size
      ' ' * (size * 2)
    end

    def div
      '  '
    end

    TIOCGWINSZ = case RbConfig::CONFIG['host_os']
    when /darwin|mac os/
      0x40087468
    when /linux/
      0x5413
    else
      0x00
    end

    def console_width
      str = [0, 0, 0, 0].pack('SSSS')
      unless $stdout.ioctl(TIOCGWINSZ, str) < 0 then
        str.unpack('SSSS')[1]
      else
        Float::INFINITY
      end
    end
  end

  class CLI
    def parse_args args
      @options = Options.new
      skip = nil
      @paths = args.each_with_object(Array.new).with_index do |(arg, paths), i|
        if arg == '-r' then
          @options.recurse = Float::INFINITY
        elsif arg == '--recurse' then
          @options.recurse += args[i + 1].to_i
          skip = i + 1
        elsif %w[-h --help].include? arg then
          usage
        elsif skip != i then
          paths << arg
        end
      end

      self # make chainable since there is no meaningful return value
    end

    def run
      longest = paths.map{|path| path.length }.max

      paths.each do |path|
        Formatter.new(wrap path).render @options, longest
      end

    ensure
      print Theme.reset_line
    end

    def paths
      if @paths.empty?
        @paths = Array(Pathname.pwd.to_s)
      else
        @paths
      end
    end

    def wrap path
      path = Pathname.new path
      if path.directory? then
        Directory.new path
      else
        Entry.new path
      end
    end

    def usage
      puts "usage: #{Pathname.new($0).basename} [-r] [--recurse DEPTH] [<paths>]"
      puts "\tshows colorized and structured libmagic types"
      puts
      puts "\t-r\trecurse infinite"
      puts "\t--recurse DEPTH\t recurse to depth"
      puts "\t-h\tshow this help"
      puts "\t<paths>\ta list of zero or more paths"
      puts "\t\twill scan PWD if no path supplied"
      exit 0
    end
  end

  class Options
    def recurse
      @recurse ||= 1
    end

    def recurse= depth
      @recurse = depth
    end

    def recurse?
      @recurse > 0
    end
  end

end

WhatKind::CLI.new.parse_args(ARGV).run
