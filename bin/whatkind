#!/usr/bin/env ruby

require 'pathname'

def self.dir_types dir, recourse = 0
  longest = 0
  results = Array.new
  path = Pathname.new dir

  if path.directory? && recourse > -1 then
    path.children.each do |subpath|
      if subpath.directory? && recourse > 0 then
        dir_info = dir_types(subpath, -1)

        dir_info = dir_info.first.first
        dir_info[0] = "SUBPATH: #{dir_info.first.to_s}"

        results << dir_info
        r, l    = dir_types subpath, recourse - 1
        longest = [l, longest].max
        results.concat r
      else
        longest = [subpath.basename.to_s.length, longest].max
        type    = %x[file #{subpath}].gsub(/#{subpath}:\s/, '')

        results << [subpath.basename, type]
      end
    end
  elsif path.exist? then
    type    = %x[file #{path}].gsub(/^#{path}:\s/, '')
    results << [path.basename, type]
  else
    results << [path.basename, "PATH NOT FOUND"]
  end

  [results, longest]
end

recourse = ARGV.detect{|a| a == '-r' } ? Float::INFINITY : 0
ARGV.reject!{|a| a == '-r' } if recourse

if ARGV.empty? then
  results, longest = dir_types Pathname.pwd, recourse
else
  longest = 0
  results = ARGV.each_with_object Array.new do |dir, list|
    r, l = dir_types dir, recourse
    longest = [l, longest].max
    list.concat r
  end
end

colors = {
  /bash|Bourne/ => "\033[0;32m",
  /zsh/ => "\033[0;34m",
  /shell|SHELL/ => "\033[0;35m",
  /perl/ => "\033[0;33m",
  /ruby/ => "\033[0;31m",
  /python/ => "\033[0;36m",
  /x86|i386/ => "\033[1;34m",
  /broken|NOT FOUND/ => "\033[1;31m",
  /link|socket/ => "\033[1;33m",
}

print "\033[1m  NAME".ljust(longest), "\t  TYPE\n"
results.each do |name, type|
  color = colors.detect{|r,c| break c if r =~ type } || "\033[0m"
  print color, name.to_s.ljust(longest), "\t", type
end

