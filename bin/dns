#!/usr/bin/env ruby

require "rbconfig"
require "pathname"

module DNS
    OS = RbConfig::CONFIG["host_os"]

    PROVIDERS = {
        cloudflare: { # first fastest and private
            ipv4: %w{1.1.1.1 1.0.0.1},
            ipv6: %w{2606:4700:4700::1111 2606:4700:4700::1001}
        },
        google: { # second fastest
            ipv4: %w{8.8.8.8 8.8.4.4},
            ipv6: %w{2001:4860:4860::8888 2001:4860:4860::8844}
        },
        quad9: { # privacy-focused, third fastest
            ipv4: %w{9.9.9.9 149.112.112.112},
            ipv6: %w{2620:fe::fe 2620:fe::9}
        },
        opendns: { # logs DNS requests, fourth fastest
            ipv4: %w{208.67.222.222 208.67.220.220},
            ipv6: %w{2620:119:35::35 2620:119:53::53}
        }
    }

    DEFAULT_PROVIDERS = %i[cloudflare quad9]

    PROVIDERS.merge!(
        {
            default: {
                ipv4: DEFAULT_PROVIDERS.map{ |name| PROVIDERS[name][:ipv4] }.flatten,
                ipv6: DEFAULT_PROVIDERS.map{ |name| PROVIDERS[name][:ipv6] }.flatten
            }
        }
    ) unless PROVIDERS[:default]

    class << self
        def manager
            @manager ||= case OS
            when /darwin/
                MacOS
            #when /linux/
            #when /mswin|mingw/
            else   
                warn "Unknown OS: #{OS}"
                exit 255
            end
        end

        def provider name
            PROVIDERS[name.downcase.to_sym]
        end
    end

    class CLI
        def initialize args
            @command = args.shift
            @args = args
        end
        attr_reader :args, :command

        COMMANDS = %i[swap show set]

        def parse_args
            return :show unless command
            method = command.downcase.to_sym
            return method if COMMANDS.include? method

            :usage
        end

        def swap
            print "Old DNS: "
            puts current_ipv4_string

            new_dns = if is_current_default?
                print "Swapping to DHCP-provided DNS: "
                :dhcp
            else
                print "Swapping to CloudFlare DNS: "
                :default
            end

            set new_dns
            
            puts current_ipv4_string
        end

        def set name
            new_ipv4 = if name.downcase.to_sym == :dhcp
                manager.dhcp
            elsif PROVIDERS.keys.include? name
                DNS.provider(name)[:ipv4]
            elsif /\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.|$)){4}\b/ =~ name
                name
            else
                warn "Unrecongized provider name or IP address: #{name}"
                exit 254
            end

            manager.set_ipv4 new_ipv4
        end

        def show
            print "Current DNS: "
            puts current_ipv4_string
        end

        def usage
            puts "usage: #{Pathname.new($0).basename} [COMMAND] [PROVIDER...]"
            puts "\ta simple DNS manager"
            puts "commands:"
            puts "\tshow\t\tshow the current DNS settings"
            puts "\tswap\t\tuse secure public DNS servers or switch back to DHCP"
            puts "\tset PROVIDER\tspecify the provider name or IP address(es) you wish to use"
            puts "\thelp\t\tyou're looking at it"
            puts "known providers:"
            print "\t", PROVIDERS.map{|provider, dns| "#{provider}\t\t#{dns[:ipv4].join(" ")}" }.join("\n\t")
            puts
        end

        def perform!
            self.send parse_args
        rescue
            usage
            raise
        end

        protected

        def is_current_default?
            current_ipv4_string.include? DNS.provider(:default)[:ipv4].first
        end

        def current_ipv4_string
            manager.current_ipv4.join " "
        end

        def manager
            DNS.manager
        end
    end

    class MacOS
        class << self
            def current_ipv4
                `networksetup -getdnsservers Wi-Fi`.split ?\n
            end

            def dhcp
                `ipconfig getoption #{device} domain_name_server`
            end

            def set_ipv4 *new_dns
                `networksetup -setdnsservers #{adapter} #{new_dns.join " "}`
            end

            def adapter
                "Wi-Fi"
            end

            def device
                "en0"
            end
        end
    end
end

DNS::CLI.new(ARGV).perform! if $PROGRAM_NAME == __FILE__
