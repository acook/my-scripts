#!/usr/bin/env ruby

require "rbconfig"
require "pathname"

module DNS
    OS = RbConfig::CONFIG["host_os"]

    PROVIDERS = {
        cloudflare: { # first fastest and private
            ipv4: %w{1.1.1.1 1.0.0.1},
            ipv6: %w{2606:4700:4700::1111 2606:4700:4700::1001}
        },
        google: { # second fastest
            ipv4: %w{8.8.8.8 8.8.4.4},
            ipv6: %w{2001:4860:4860::8888 2001:4860:4860::8844}
        },
        quad9: { # privacy-focused, third fastest
            ipv4: %w{9.9.9.9 149.112.112.112},
            ipv6: %w{2620:fe::fe 2620:fe::9}
        },
        opendns: { # logs DNS requests, fourth fastest
            ipv4: %w{208.67.222.222 208.67.220.220},
            ipv6: %w{2620:119:35::35 2620:119:53::53}
        }
    }

    DEFAULT_PROVIDERS = %i[cloudflare quad9]

    PROVIDERS.merge!(
        {
            default: {
                ipv4: DEFAULT_PROVIDERS.map{ |name| PROVIDERS[name][:ipv4] }.flatten,
                ipv6: DEFAULT_PROVIDERS.map{ |name| PROVIDERS[name][:ipv6] }.flatten
            }
        }
    ) unless PROVIDERS[:default]

    class << self
        def manager
            @manager ||= case OS
            when /darwin/
                MacOS
            when /linux/
                Linux
            #when /mswin|mingw/
            else
                warn "Unknown OS: #{OS}"
                exit 255
            end
        end
    end

    class CLI
        def initialize args, manager = DNS.manager, providers = DNS::PROVIDERS
            @command = args.shift
            @args = args
            @manager = manager
            @providers = providers
        end
        attr_reader :args, :command, :manager, :providers

        COMMANDS = %i[swap show set]

        def swap
            print "Old DNS: "
            puts current_ipv4_string

            new_dns = if is_current_default?
                print "Swapping to DHCP-provided DNS: "
                :dhcp
            else
                print "Swapping to secure public DNS: "
                :default
            end

            set_dns new_dns

            puts current_ipv4_string
        end

        def set *args
            print "Old DNS: "
            puts current_ipv4_string

            set_dns *args

            show
        end

        def show
            print "Current DNS: "
            puts current_ipv4_string
        end

        def usage
            puts "usage: #{Pathname.new($0).basename} [COMMAND] [PROVIDER...]"
            puts "\ta simple DNS manager"
            puts
            puts "commands:"
            puts "\tshow\t\tshow the current DNS settings"
            puts "\tswap\t\tuse secure public DNS servers or switch back to DHCP"
            puts "\tset PROVIDER\tspecify the provider name or IP address(es) you wish to use"
            puts "\ttodo\t\tmissing features"
            puts "\thelp\t\tyou're looking at it"
            puts
            puts "known providers:"
            print "\t", providers.map{|provider, dns| "#{provider}#{provider.size < 8 ? ?\t : ''}\t#{dns[:ipv4].join(" ")}" }.join("\n\t")
            puts
        end

        def todo
            puts <<-TODO
                - linux support
                - windows support
                - IPv6 support
                - specify the device/adapter on the commandline
                - attempt to guess the device or adapter when given the other
                - load providers from file?
            TODO
        end

        def perform!
            method = parse_command
            case method
            when :set
                set *args
            else
                self.send method
            end
        end

        protected

        IP_REGEX = /\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.|$)){4}\b/

        def set_dns name_or_ips
            name = name_or_ips.downcase.to_sym
            if name == :dhcp
                manager.set_dhcp
                return
            end

            new_ipv4 = if providers.keys.include? name
                providers[name][:ipv4]
            elsif IP_REGEX =~ name_or_ips
                name
            else
                warn "Unrecognized provider name or IP address: #{name_or_ips}"
                exit 254
            end

            manager.set_ipv4 new_ipv4
        end

        def parse_command
            return :show unless command
            method = command.downcase.to_sym
            return method if COMMANDS.include? method

            :usage
        end

        def is_current_default?
            manager.current_ipv4.include? providers[:default][:ipv4].first
        end

        def current_ipv4_string
            manager.current_ipv4.join " "
        end
    end

    class MacOS
        class << self
            def current_ipv4
                `networksetup -getdnsservers Wi-Fi`.split ?\n
            end

            def set_dhcp
                `ipconfig getoption #{device} domain_name_server`
            end

            def set_ipv4 *new_dns
                `networksetup -setdnsservers #{adapter} #{new_dns.join " "}`
            end

            def adapter
                "Wi-Fi"
            end

            def device
                "en0"
            end
        end
    end

    class Linux
        class << self
            # also `resolvectl status`
            def current_ipv4
                `nmcli dev show`.split(?\n).each.with_object([]) do |line, dns|
                    match = line.match /IP4\.DNS\[\d\]:\s*(\d+\.\d+\.\d+\.\d+)$/
                    if match then
                        dns << match.captures.first
                    end
                end
            end

            def set_dhcp
                #`ipconfig getoption #{device} domain_name_server`
                raise NotImplementedError
            end

            def set_ipv4 *new_dns
               `sudo nmcli connection modify "#{adapter}" ipv4.dns "#{new_dns.join " "}"`
            end

            def adapter
                as = adapters
                if as.empty? then
                    warn "Adapter not found!\n\n\e[31m#{`nmcli device`}\e[0m"
                    exit 1
                end
                as.first
            end

            def adapters
                `nmcli device`.split(?\n).each.with_object([]) do |line, as|
                    next if line.include? "CONNECTION"

                    match = line.match /^(.*?)\s+(?:ethernet|wifi)\s+connected/

                    if match then
                        as << match.captures.first
                    end
                end
            end

            def device
                "en0"
            end
        end
    end
end

DNS::CLI.new(ARGV).perform! if $PROGRAM_NAME == __FILE__
